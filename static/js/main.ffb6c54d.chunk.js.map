{"version":3,"sources":["components/GameOver.js","components/Card.js","components/Scoreboard.js","components/Gameboard.js","App.js","index.js"],"names":["GameOver","props","currentScore","highScore","onClick","newGame","Card","className","card","clicked","setIsGameOver","newScore","setCurrentScore","cardIndex","cards","findIndex","element","id","newCards","setCards","setHighScore","src","icon","alt","name","Scoreboard","Gameboard","useState","heroes","setHeroes","findDuplicates","array","Array","from","Set","map","item","find","a","fetch","fetchedHeroes","json","heroesData","randomHeroes","length","Math","floor","random","randomHero","push","shuffleCards","randomIndex","currentIndex","useEffect","fetchHeroes","newHeroes","heroList","i","hero","localized_name","image","img","App","isGameOver","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ffb6c54d.chunk.js","sourcesContent":["export default function GameOver(props) {\n    return (\n        <div>\n            <h2>Game over</h2>\n            {props.currentScore === props.highScore\n                ? <p>New high score!</p>\n                : null\n            }\n            <p>You scored {props.currentScore} {props.currentScore > 1 ? 'points' : 'point'}</p>\n            <p>Your high score is {props.highScore} points</p>\n            <button onClick={props.newGame}>New Game</button>\n        </div>\n    );\n};","import '../styles/Card.css';\n\nexport default function Card(props) {\n    const handleClick = () => {\n        if (props.card.clicked) {\n            props.setIsGameOver(true);\n        } else {\n            const newScore = props.currentScore+1;\n            props.setCurrentScore(newScore);\n            \n            const cardIndex = props.cards.findIndex(element => element.id === props.card.id);\n            let newCards = [...props.cards];\n            newCards[cardIndex] = {...newCards[cardIndex], clicked: !newCards[cardIndex].clicked}\n            props.setCards(newCards);\n\n            if (newScore > props.highScore) {\n                props.setHighScore(newScore);\n            };\n        };\n    };\n\n    return (\n        <div className='cardContainer' onClick={handleClick}>\n            <figure className='card'>\n                <img src={props.card.icon} alt={props.card.name}></img>\n                <figcaption>{props.card.name}</figcaption>\n            </figure>\n        </div>\n    );\n};","// import '../styles/Scoreboard.css';\n\nexport default function Scoreboard(props) {\n    return (\n        <div>\n            <p>Current Score: {props.currentScore}</p>\n            <p>High Score: {props.highScore}</p>\n        </div>\n    );\n};","import { useState, useEffect } from 'react';\nimport Card from './Card';\nimport Scoreboard from './Scoreboard';\nimport '../styles/Gameboard.css';\n\nexport default function Gameboard(props) {\n\n    const [heroes, setHeroes] = useState([]);\n    const [cards, setCards] = useState([]);\n\n    useEffect(() => {\n        fetchHeroes();\n        const newHeroes = [...heroes];\n        shuffleCards(newHeroes)\n        setHeroes(newHeroes);\n    }, []);\n\n    useEffect(() => {\n        const newCards = [...cards];\n        shuffleCards(newCards)\n        setCards(newCards);\n    }, [props.currentScore]);\n\n    useEffect(() => {\n        const heroList = [];\n        for (let i=0; i<heroes.length; i++) {\n            const hero = {\n                name: heroes[i].localized_name,\n                icon: 'https://api.opendota.com' + heroes[i].icon,\n                image: 'https://api.opendota.com' + heroes[i].img,\n                id: heroes[i].id,\n                clicked: false,\n            };\n            heroList.push(hero);\n        };\n        setCards(heroList);\n    }, [heroes]);\n\n    function findDuplicates(array) {\n        const uniqueElements = Array.from(new Set(array.map(item => item.id)))\n        .map(id => {\n            return array.find(item => item.id === id);\n        });\n        return uniqueElements;\n    };\n\n    async function fetchHeroes() {\n        const fetchedHeroes = await fetch('https://api.opendota.com/api/heroStats/');\n        const heroesData = await fetchedHeroes.json();\n        const randomHeroes = [];\n\n        while (randomHeroes.length < 6) {\n            const randomHero = await heroesData[Math.floor(Math.random() * heroesData.length)];\n            randomHeroes.push(randomHero);\n        };\n        await setHeroes(findDuplicates(randomHeroes));\n    };\n\n    function shuffleCards(array) {\n        let currentIndex = array.length, randomIndex;\n\n        // While there are elements to shuffle...\n        while (currentIndex !==0) {\n\n            // Pick a remaining element...\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex--;\n\n            // Swap it with the current element.\n            [array[currentIndex], array[randomIndex]] = [\n                array[randomIndex], array[currentIndex]];\n        };\n        return array;\n    };\n\n    return (\n        <section>\n            <nav>\n                <Scoreboard currentScore={props.currentScore} setCurrentScore={props.setCurrentScore} highScore={props.highScore} setHighScore={props.setHighScore} />\n            </nav>\n            <section className='gameboard'>\n            {cards.map(card=>{\n                return (\n                    <Card key={card.id}\n                    card={card} cards={cards} setCards={setCards}\n                    currentScore={props.currentScore} setCurrentScore={props.setCurrentScore}\n                    highScore={props.highScore} setHighScore={props.setHighScore}\n                    setIsGameOver={props.setIsGameOver} />\n                );\n            })}\n            </section>\n        </section>\n    );\n};","import { useState } from 'react';\nimport GameOver from './components/GameOver';\nimport Gameboard from './components/Gameboard';\nimport './styles/App.css';\n\nexport default function App() {\n  const [currentScore, setCurrentScore] = useState(0);\n  const [highScore, setHighScore] = useState(0);\n  const [isGameOver, setIsGameOver] = useState(false);\n\n  function newGame() {\n    setIsGameOver(false);\n    setCurrentScore(0);\n  };\n\n  return (\n    <div className=\"App\">\n      {isGameOver\n        ? <GameOver currentScore={currentScore} setCurrentScore={setCurrentScore} highScore={highScore} setIsGameOver={setIsGameOver} newGame={newGame} />\n        : <Gameboard currentScore={currentScore} setCurrentScore={setCurrentScore} highScore={highScore} setHighScore={setHighScore} setIsGameOver={setIsGameOver} />\n      }\n    </div>\n  );\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}